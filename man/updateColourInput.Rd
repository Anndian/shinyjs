% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/colourInput.R
\name{updateColourInput}
\alias{updateColourInput}
\title{Change the value of a colour input}
\usage{
updateColourInput(session, inputId, label = NULL, value = NULL,
  showColour = NULL)
}
\arguments{
\item{session}{The \code{session} object passed to function given to \code{shinyServer}.}

\item{inputId}{The id of the colour input object.}

\item{label}{The label to set for the input object.}

\item{value}{The value to set for the input object.}

\item{showColour}{Whether to shoW the chosen colour via text, background, or both.}
}
\description{
Change the value of a colour input on the client.
}
\details{
The update function sends a message to the client, telling it to change
the settings of a colour input object.\cr
This function works similarly to the update functions provided by shiny.\cr
Any argument with \code{NULL} values will be ignored.
}
\note{
Unlike the rest of the \code{shinyjs} functions, this function does
not require you to call \code{useShinyjs()} first.

There seems to be a bug with the JavaScript plugin that results in
the following behaviour: if you change the value of a colour input after
you have set the colour manually at least once and your next mouse click
is not on the colour input, then the colour input will not retain the
updated colour from this function call.
}
\examples{
if (interactive()) {
  shiny::shinyApp(
    ui = shiny::fluidPage(
      colourInput("col", "Colour", "red"),
      shiny::textInput("text", "New colour: (colour name or HEX value)"),
      shiny::actionButton("btn", "Update")
    ),
    server = function(input, output, session) {
      shiny::observeEvent(input$btn, {
        updateColourInput(session, "col", value = input$text)
      })
    }
  )
}
}
\seealso{
\code{\link[shinyjs]{colourInput}}
}

